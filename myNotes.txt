Creating React App (two options npx or npm): 
[1] npx create-react-app <project-name> 
(not installed globally so no worries about update package)

[2] npm creat-react-app -g
    create-react-app<project_name> 
(installed globally so needs update)

* note : remove <React.StrictMode> from index.js if React component render twice

    React : 
* is library not framework
* Focus on UI not Routing(1) or HTTP Requests
* Has a Rich EcoSystem(2)
* Has a component Based Architecture(3)
* is Declarative(4)
* will handle updating and rendering of the components
* will handle DOM updates



notes:
[1] Routing : is a technology for switching between different UI views, based on the changes of the current URL
[2] Rich EcoSystem : the interesting features and libraries that are available to use with React
[3] component Based Architecture : let you to break down the Application into small encapsulated parts then you can compose them and you has the ability also to reuse these components
[4] Declarative : Tell the React what you want and will build the actual UI
    ** Difference between Declarative programming and Imperative programming: 
    Declarative programming is a paradigm describing WHAT the program does, without explicitly specifying its control flow.
    Imperative programming is a paradigm describing HOW the program should do something by explicitly specifying each instruction (or statement) step by step.

    **Redux : Redux is a state management library (is a predictable state container for JavaScript apps ) that you can use with any JS library or framework like React, Angular, or Vue.
    https://www.freecodecamp.org/news/what-is-redux-store-actions-reducers-explained/amp/

Components : 
    * Root component (usually called APP) inside it there are 4 components :
        (1) Header component
        (2) Side Nav component
        (3) Main Content Component
        (4) Footer component

Types of Components :
    [A] Functional Component 
        a normal JS function returns HTML
        
        function welcome(props){
            return <h1>hello, {props.name}<h1>
        }
    
    [B] Class Component :
        a class Extending Component Class (from React library) and this class has render Method returns HTML
        
        class welcome extends React.component {
            render(){
                return <h1>hello, {this.props.name}<h1> 
            }
        }

JSX (JavaScript language syntax) : 
    * transiles to pure JS which is understood by Browser
    * Write XML-like code for elements and component
    * have a tag name , attributes and children
    * you can use React without JSX but with JSX code will be simpler
    * class => className -  for => htmlFor - onclick => onClick - tabindex => tabIndex

Props : 
    * is an object that's contains attributes and values which are passed in parent component ( inside App.js => like <Greet name="Ahmed"></Greet>) 
    * you can use props.children to get elements that added between <Greet></Greet> in parent component ( inside App.js )
    * props is immutable => you can not change it's value from Functional Component  or Class Component inside for Exp. Greet.js
    
Diffrence between State and Props : 
    Props : is Parameter passed to the component and immutable (can be accessed by props in Functional Component or this.props in Class component)
    State : is Variable and managed inside Component and mutable (can be accessed by useState Hook in Functional component or this.state in Class component)

setState :
    * a Method to make changes to state (When you change state directly without using setState you change it but not invoking Render Method so will change but will not shown on the page see exp. in counter.js)
    * has two Parameters (state Object , callBack Function)
    * 1st parameter (state object) can be replaced by function and this function has 2 parameters (prevState , props)
    * when you have to update state based on previous state value , pass in a functions as an argument to the setState method instead of state object
    * ASYNC Method (see exp. in counter.js) to solve this problem use 2nd parameter of setState Method 
    * 2nd Parameter used when you want to change state and invoke another function that use the new value of the state (see exp. in parentComponent.js)

prevState :
    Batching is when React groups multiple state updates into a single update. That is only one single re-render will eventually happen.
    so we use prevState (like new Variable created ) so you can increment it because state will update the value only one time

Shortcuts :
    * rce : class component
    * rcfe : function component
    * rpce : pure Component
    * rconst : construtor

EventBinding: 
    ** because Eventhandler Function is Async and excuted globaly so this will be window object ( in class will be undefined because of strict mode)
    we have 4 options to be sure that this will be class not undefined 

    [1] use bind keyword in render method  (bad performance)
    [2] use arrow function in render method  (bad performance)
    [3] use arrow function as class prop 
    [4] use bind keyword in construtor

Conditional render (exp. userGreeting.js):
    [1] if / else
    [2] Variable
    [3] ternary operator
    [4] short circuit operator

Keys of list :
    * has to be uniquex
    * to avoid a warning message on list (EXP. persons.js) add key property to each child
    * Key is not a prop (you can not access it see persons.js)
    * it is not recommended to use index as key because React link the item list to it's key
    so when add item at the begining you change the index of all items but when render the
    React will render the item (for Exp. item linked to key 0) to the old item linked to 0
    not the newly added item (see video 19 if you didn't understand)

Style in React :
    [1] CSS Stylesheet
    [2] inline styling (object has styles and should be camelCase see inline.js)
    [3] CSS Modules 
     * in regular CSS file import like this import "./appStyles.css" but from module will be like this import styles from "./appStyles.module.css"
     * using regular CSS file <h1 className='error'>Regular CSS</h1> but in module CSS <h1 className={styles.success}>Module CSS</h1>
     * CSS Module better than regular CSS because child component can use regular CSS File(imported to parent component) and this leads to conflict
     but in CSS Module you can not access it at child component because it's locally scoped (see inline.js)
    [4] CSS in JS libraries

LifeCycle Methods : 
    React component when created will call built-in Methods like constructor in Class component and those built-in methods you can override them : 

    [1] Mounting : when an instance of component is being created and inserted into the DOM
        (a)constructor  
        * constructor is perfect for : initializing state or binding (this) to event handler -- do not HTTP Requests inside constructor
        
        (b) static getDerivedStateFromProps(props , state)
        * used when the state of the component depends on changes in props over time.
        * is a static method that is called just before render() method in both mounting and updating phase in React. 
        It takes updated props and the current state as arguments. 
        We have to return an object(the updated state object) or null to indicate that nothing has changed.
                      
        (c) render 
            * The only required Method
            * Do not : Change the state or interact with DOM or make AJAX Calls

        (d) componentDidMount :
            * invoked only once and immediately after a component and all it's Children components has been rendered to the DOM
            * now you can DO : interact with DOM or AJAX calls

    [2] Updating : when a component is being re-render as a result of changes to either it's props or state
        (a) static getDerivedStateFromProps 
            * same like in Mounting

        (b) shouldComponentUpdate 
            * this method decide if the component should re-render or not 
            by default all components will re-render when they recieve a props or the state changes 
            but with shouldComponentUpdate method you can prevent this default behavior by returning false
        
        (c) render 
            * same like in Mounting

        (d) getSnapshotBeforeUpdate(prevProps , prevState)
            * is invoked right before the most recently rendered output is committed to e.g. the DOM. 
            It enables your component to capture some information from the DOM (e.g. scroll position) 
            before it is potentially changed. Any value returned by this lifecycle method 
            will be passed as a parameter to componentDidUpdate().
            * Exp. of using this Method is take the position of scroll of the user inside the website
            and return this information of position and this will be a parameter to componentDidUpdate() 
            so we can use this information to scroll agin the website to the same postion before updating
            * getSnapshotBeforeUpdate will be called before componentDidUpdate even the children 
        
        (e) componentDidUpdate(prevProps , prevState, snapshot)
            * Called only once after each re-render cycle
            * can use AJAX and use prevState with new State
    
    [3] Unmounting : when a component is being removed from the DOM
        (a) componentWillUnmount 
            * invoked immediatly before a component is unmounted or destroyed
            * can be used for cancelling any network requests , removing event handlers , cancelling any subscriptions and also invalidating timers

    [4] Error Handling : when there is an Error during rendering , a LifeCycle method , in a constructor in any child component 
        * Error Boundaries are React Component that catch JS Error in their child component tree 
        * A class component becomes an Error Boundary by definig either or both of getDerivedStateFromError and componentDidCatch (see ErrorBoundary.js) 
        * Error Boundary can not catch Error in event handler
        
        (a)static getDerivedStateFromError : is used to render a fallback UI after an error is thrown 
            
        (b)componentDidCatch(error , info) : is used to log the error information

Fragments : 
    * let you group list of children elements without adding extra nodes to DOM (see fragmentDemo.js and columns.js)
    * key attribute the only attribute can be added to React.Fragment
    * the shorthand of <React.Fragment></React.Fragment> is <></> but you can not add key attribute

Pure Component (works only with class component) : 
    Diffrence between Regular Component and Pure Component : 
    - shouldComponentUpdate implement : 
        * Regular Component does not implement shouldComponentUpdate method and always return true (that's why when changing state to same value will render see (parentComp.js))
        * Pure Component implement shouldComponentUpdate method with a shallow comparison of props and state ( that's why when changing state to same value will not render see (parentComp.js) )
        note : shallow comparison ( [a] primitive types : should be same value and same data type [b] Complex Types : both should reference to the same object like arrays or objects)
        note : if the state is an array do not use for exp. push method to array because you are mutating the same array with same reference so pure component will not render it's better to return new array with new reference

memo (because pure component does not work with functional component we use memo Component):
    * export default React.memo(MemoComp) / React.memo() called higher order component (later will discuss)

ref (reference can by added to DOM element or class Component): 
    * you can create a ref object by React.createRef() in constructor and use ref attribute on element to link this element to created ref
    and this element will be stored as property called current so you can get it by this.myRef.current and you can for exp. Focus on it by this.myRef.current.focus() (see exp. refsDemo.js)
    * or you can add ref attribute to class component inside parent component and access this component by this.inputComp.current see (focusInput.js)

callback ref : 
    * instead of using React.createRef() in the constructor:
    [1] we create an property called cbRef that is initially set to null. 
    [2] create a method called setCbRef.
    [3] add ref attribute to the element and pass setCbRef method to it (now it's callback)
    [4] When the element mounts the callback ref (setCbRef method) is executed and the element will be an argument for this.setCbRef.
    note : The callback function passed to the ref attribute executes immediately upon the component mounting before componentDidMount fires so The referenced element is also guaranteed to be up to date before componentDidUpdate is executed.
    note : The stored element is directly accessible via this.cbRef (instead of stored as the .current attribute of the object created by React.createRef() or useRef()).

forward ref : 
    * a technique that forwards a ref through a component to one of its children
    * React.forwardRef(component) accept a component as a parameter and this component accept two parameter props and ref see (FRInput.js)

Protals : 
    * root in React : in index.js you will find that we are creating a root using ReactDOM.createRoot() method
    and add the div element that we want it as root by selecting it from index.html by using document.getElementById('root') the render with root and add APP component
    
    * But protals provide a way to render a children outside the root and steps are :
    [1] create an element in index.html and give it an ID (portal-root)
    [2] import ReactDOM  from 'react-dom' inside component (PortalDemo.js)
    [3] use ReactDOM.createPortal(JSX , element) accept 2 parameters 1st is JSX and 2nd is element that you created outside the root (portal-root)

    * use case of Portals is when you add style to all root DOM element and you need another element that does not inherit these styles

    * Note : portals is not inside root element but act as a child in React DOM so event bubbling still works if you click on portal element will buuble up to parents in React root ( https://codepen.io/gaearon/pen/jGBWpE)

Higher Order Component HOC : is a pattern that takes a component as an argument and returns a new component (see ClickCounter.js , HoverCounter.js and HOC.js) 
    * if you want to add for exp. same function to two components no need two write function to each component 
    you can create a function that accept these components as parameter and return a new component (original component + function ) 
    and you can access this function from props that you added inside render method of new component

    * if you want to pass a property to ClickCounter or HoverConuter from APP.js you have to write {...this.props} inside <OriginalComponent> in HOC.js
    because you already use ClickCounter and HoverConuter when you return UpdatedComponent(HoverCounter or ClickCounter) 
    so HoverConuter or ClickCounter inside APP.js not them they are updated version after using HOC

    * you can use 2nd paramter of HOC to use for any purpose you want for exp. (we added incrementNum so you can add different num for each HoverConuter or ClickCounter by returning export default UpdatedComponent(ClickCounter , 10) ) 
    
Render Props : 
    * render prop is a technique for sharing code between React Components using a prop whose value is a function
    * same concept of HOC you hace function and you need to write it to ClickCounterTwo and HoverConuterTwo so you can use 3rd component
    like RenderProps.js and then you can add property(render property) to RenderProps component and this property can be a function and this function accepts
    parameters and return ClickCounterTwo or HoverConuterTwo component and add those paramters as property to them (now you shared them ) 
    and last step to call render property inside RenderProps.js

context : 
    * providing a way to pass data through the component tree without having to pass props down manually at every level
    (means if you have parent A and has child B and grandchild C without context you have to pass property username to A then B then C to access it from grandChild C)

    * Steps : 
        [1] create Context (see UserContext.js) : using React.createContext() Method then take from it 2 components Provider and Consumer
        [2] add Provider Component to APP Component and add property called value to it then inside Provider add ComponentA
        [3] add Consumer to GrandChild (ComponentC) and insid Consumer add function the parameter of this function is the property value that you added to Provider

    * you can add default value by adding it as parameter inside React.createContext() Method and if you didn't add Provider in APP.js 
    Consumer will search for Provider if not found will use default value

    * another steps using contextType (instead of adding consumer and then adding function and it's parameter will be the value property of Provider) : 
    we can export UserContext from UserContext.js and change ContextType of ComponentC to UserContext by (1) ComponentC.contextType = UserContext or (2) static contextType = UserContext
    then we can access value property by this.context 

    * but regular Context is better than typeContext because
    [1] typeContext works only with class component
    [2] with multiple contexts you can not use type context : 
        function content() {
            return (
                <themeContext.consumer>
                    {
                        theme => (
                            <userContext.consumer>
                                {
                                    user => (
                                        <profilepage user={user} theme={theme}></profilepage>
                                    )
                                }
                            </userContext.consumer>
                        )
                    }
                </themeContext.consumer>
            ) 
        }


HTTP : React does not do HTTP Request so we need to use another liberary with Reat (HTTP libraries like axios)


HOOKS : 
    * Allow you to use React features without having to write a class (EXP. state before should use class component with HOOKS no need for class component)
    * Do not work inside classes
    * Avoid the confusion of this keyword
    * Allow you to reuse stateful logic
    * Organize the logic inside a component into reusable isolated units
    * Only call Hooks at the Top Level (do not call hooks inside  loops, conditions or nested functions)
    * Only call Hooks from React Functions (call them from React Functional Component not regular JS Function)

useState Hook : is a function from React accepts an argumet ( initial value of state) and returns 
    array of the current value of state property and a method for updating state property

setState : (two options to use it) (see HookCounterTwo.js) 
    [1] setState(new state value)
    [2] setState(function accepts prevState as an argument) this is safer because of Batching